//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: Wave Race 64
//   Authors: Shadow-Link
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct {
    uint checksum;
} Checksum;

typedef struct {
    char name[10];
} CustomName;

typedef enum <byte> {
    STEREO = 0,
    HEADPHONES = 1,
    MONO = 2
} AudioSetting;

typedef enum <byte> {
    NORMAL,
    HARD,
    EXPERT,
    REVERSE
} Level;

typedef enum <byte> {
    RYOTA_HAYAMI = 0,
    DAVE_MARINER = 1,
    AYUMI_STEWART = 2,
    MILES_JETER = 3
} Character;

typedef struct {
    BitfieldDisablePadding();
    Character character : 3;
    uint timeMilis : 21;
    BitfieldEnablePadding();

    ushort usedCustomSettings : 1;
    ushort initial1 : 5; // 1 = A, 2 = B etc
    ushort initial2 : 5; // 1 = A, 2 = B etc
    ushort initial3 : 5; // 1 = A, 2 = B etc

    Level level;
} Rank;

typedef struct {
    Rank rank1;
    Rank rank2;
    Rank rank3;
    Rank lap;
} TimeRanks;

typedef struct {
    Character character : 3;
    short score;

    ushort usedCustomSettings : 1;
    ushort initial1 : 5; // 1 = A, 2 = B etc
    ushort initial2 : 5; // 1 = A, 2 = B etc
    ushort initial3 : 5; // 1 = A, 2 = B etc
} HighScore;

typedef struct {
    HighScore highScores[3];
} Scores;

typedef struct {
    TimeRanks timeRanksSunnyBeach;
    TimeRanks timeRanksSunsetBay;
    TimeRanks timeRanksMarineFortress;
    TimeRanks timeRanksDrakeLake;
    TimeRanks timeRanksPortBlue;
    TimeRanks timeRanksTwilightCity;
    TimeRanks timeRanksSouthernIsland;
    TimeRanks timeRanksGlacierCost;

    Scores scoresDolphinPark;
    Scores scoresSunnyBeach;
    Scores scoresSunsetBay;
    Scores scoresMarineFortress;
    Scores scoresDrakeLake;
    Scores scoresPortBlue;
    Scores scoresTwilightCity;
    Scores scoresSouthernIsland;
    Scores scoresGlacierCost;
    
    byte padding;
} Records;

typedef struct {
    byte handling;
    byte engine;
    byte grip;
} WatercraftSettings;

typedef struct {
    byte unknown[6];
} UnknownData;

typedef struct {
    byte unknown[5];
} UnknownData2;

typedef enum <byte> {
    DEFAULT,
    CALM,
    WILD,
    RANDOM
} WaveConditions;

typedef struct {
    WaveConditions waveConditions;
    byte numberOfMisses;
    byte numberOfLaps;
} Conditions;

typedef struct {
    Checksum checksum;
    byte padding1[4];
    byte someNormalValue;   // 1 by default, 6 when finished normal?
    byte someHardValue;     // 0 by default, 6 when finished hard?
    byte someExpertValue;   // ?
    byte someReverseValue;  // ?
    
    AudioSetting audioSetting : 2;
    byte isMusicDisabled : 1;
    byte unknown : 1;
    byte didFinishReverse : 1;  // TODO: Double check
    byte didFinishExpert : 1;   // TODO: Double check
    byte didFinishHard : 1;     // TODO: Double check
    byte didFinishNormal : 1;   // TODO: Double check
    byte padding2[3];
    
    CustomName names[4];
    WatercraftSettings customSettings[4];
    WatercraftSettings defaultSettings[4]; // ? 
    Conditions conditions[3];
    byte padding3[7];

    Records records;
    UnknownData unknownData[8]; // Seems to be something with record data
    UnknownData2 unknownData2[8];
} SaveFile;

BigEndian();
SaveFile saveFile;